
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\004\007\000\002\002\004\000\002\005" +
    "\007\000\002\054\004\000\002\054\002\000\002\007\003" +
    "\000\002\007\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\011\004\000\002\015\006\000\002\015\007\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\012\005" +
    "\000\002\017\005\000\002\017\007\000\002\020\003\000" +
    "\002\020\005\000\002\013\010\000\002\014\012\000\002" +
    "\022\005\000\002\022\002\000\002\023\005\000\002\023" +
    "\007\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\024\005\000\002\027\003\000\002\027\006\000\002\027" +
    "\005\000\002\030\004\000\002\003\004\000\002\003\002" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\034\003\000\002\034\003\000" +
    "\002\032\003\000\002\032\004\000\002\032\005\000\002" +
    "\032\004\000\002\032\006\000\002\032\005\000\002\036" +
    "\005\000\002\036\002\000\002\037\003\000\002\037\005" +
    "\000\002\025\004\000\002\026\007\000\002\040\005\000" +
    "\002\040\002\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\004\000\002\043\006\000\002\043" +
    "\007\000\002\044\012\000\002\044\005\000\002\045\003" +
    "\000\002\045\003\000\002\050\006\000\002\051\012\000" +
    "\002\052\007\000\002\053\006\000\002\053\007\000\002" +
    "\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\010\004\001\002\000\004\062\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\041\010\001\002\000\016\011\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\024\ufffd\001\002\000\016\011\016" +
    "\013\025\014\027\015\014\016\017\024\022\001\002\000" +
    "\004\005\013\001\002\000\004\002\001\001\002\000\004" +
    "\062\263\001\002\000\016\011\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\024\ufffe\001\002\000\016\011\uffa7\033\uffa7" +
    "\035\uffa7\037\uffa7\041\uffa7\062\uffa7\001\002\000\004\062" +
    "\106\001\002\000\016\011\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\024\ufff8\001\002\000\016\011\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\024\ufff6\001\002\000\004\062\065" +
    "\001\002\000\016\011\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\024\ufff7\001\002\000\016\011\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\024\ufffa\001\002\000\004\062\051\001" +
    "\002\000\016\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\024\ufff9\001\002\000\004\062\032\001\002\000\004\044" +
    "\046\001\002\000\004\041\035\001\002\000\006\040\033" +
    "\044\uffec\001\002\000\004\062\032\001\002\000\004\044" +
    "\uffeb\001\002\000\022\011\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\024\uffef\041\uffef\062\032\001\002\000\004\044" +
    "\037\001\002\000\012\004\045\006\041\007\042\062\043" +
    "\001\002\000\010\012\uffae\041\uffae\057\uffae\001\002\000" +
    "\010\012\uffe4\041\uffe4\057\uffe4\001\002\000\010\012\uffe2" +
    "\041\uffe2\057\uffe2\001\002\000\010\012\uffad\041\uffad\057" +
    "\uffad\001\002\000\006\012\uffed\041\uffed\001\002\000\010" +
    "\012\uffe3\041\uffe3\057\uffe3\001\002\000\012\004\045\006" +
    "\041\007\042\062\043\001\002\000\006\012\uffee\041\uffee" +
    "\001\002\000\022\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\024\ufff5\041\ufff5\062\060\001\002\000\004\042\052" +
    "\001\002\000\010\063\053\064\055\065\056\001\002\000" +
    "\056\017\ufff0\020\ufff0\021\ufff0\022\ufff0\026\ufff0\034\ufff0" +
    "\036\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\057\ufff0\061\ufff0\001\002\000\004\041\057\001" +
    "\002\000\056\017\ufff2\020\ufff2\021\ufff2\022\ufff2\026\ufff2" +
    "\034\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\057\ufff2\061\ufff2\001\002\000\056\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\026\ufff1\034\ufff1\036\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\057\ufff1\061\ufff1\001\002\000\022\011\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\024\ufff4\041\ufff4\062\ufff4\001\002" +
    "\000\004\042\061\001\002\000\010\063\053\064\055\065" +
    "\056\001\002\000\004\041\063\001\002\000\022\011\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\024\ufff3\041\ufff3\062" +
    "\ufff3\001\002\000\020\011\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\024\uffb3\041\uffb3\001\002\000\004\042\066\001" +
    "\002\000\006\025\071\027\067\001\002\000\004\062\032" +
    "\001\002\000\004\041\101\001\002\000\004\060\072\001" +
    "\002\000\010\063\053\064\055\065\056\001\002\000\004" +
    "\045\074\001\002\000\010\063\053\064\055\065\056\001" +
    "\002\000\004\061\076\001\002\000\004\026\077\001\002" +
    "\000\012\004\045\006\041\007\042\062\043\001\002\000" +
    "\004\041\uffb0\001\002\000\022\011\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\024\uffb2\041\uffb2\062\065\001\002\000" +
    "\020\011\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\024\uffb1" +
    "\041\uffb1\001\002\000\006\012\105\041\104\001\002\000" +
    "\004\062\032\001\002\000\004\041\uffaf\001\002\000\006" +
    "\044\uffe7\056\107\001\002\000\004\062\032\001\002\000" +
    "\004\044\111\001\002\000\012\004\045\006\041\007\042" +
    "\062\043\001\002\000\004\041\113\001\002\000\016\011" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\024\ufffd\001\002" +
    "\000\004\041\115\001\002\000\016\011\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\024\uffe9\001\002\000\004\057\124" +
    "\001\002\000\004\044\120\001\002\000\012\004\045\006" +
    "\041\007\042\062\043\001\002\000\006\041\122\057\uffe6" +
    "\001\002\000\004\062\032\001\002\000\004\057\uffe5\001" +
    "\002\000\006\041\uffe8\044\uffe8\001\002\000\016\011\uffb7" +
    "\033\143\035\131\037\140\041\uffb7\062\126\001\002\000" +
    "\014\005\255\041\uffbd\046\uffda\056\203\060\257\001\002" +
    "\000\006\011\245\041\244\001\002\000\020\011\uffdd\012" +
    "\uffdd\033\uffdd\035\uffdd\037\uffdd\041\uffdd\062\uffdd\001\002" +
    "\000\004\062\235\001\002\000\020\011\uffb7\012\233\033" +
    "\143\035\131\037\140\041\uffb7\062\126\001\002\000\020" +
    "\011\ufffc\012\ufffc\033\ufffc\035\ufffc\037\ufffc\041\ufffc\062" +
    "\ufffc\001\002\000\004\041\232\001\002\000\004\046\230" +
    "\001\002\000\020\011\uffdf\012\uffdf\033\uffdf\035\uffdf\037" +
    "\uffdf\041\uffdf\062\uffdf\001\002\000\020\011\uffdc\012\uffdc" +
    "\033\uffdc\035\uffdc\037\uffdc\041\uffdc\062\uffdc\001\002\000" +
    "\016\023\146\056\145\062\144\063\053\064\055\065\056" +
    "\001\002\000\004\041\216\001\002\000\020\011\uffde\012" +
    "\uffde\033\uffde\035\uffde\037\uffde\041\uffde\062\uffde\001\002" +
    "\000\016\023\146\056\145\062\144\063\053\064\055\065" +
    "\056\001\002\000\062\005\202\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\026\uffbd\034\uffbd\036\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\203\057\uffbd\060\205\061" +
    "\uffbd\001\002\000\016\023\146\056\145\062\144\063\053" +
    "\064\055\065\056\001\002\000\016\023\146\056\145\062" +
    "\144\063\053\064\055\065\056\001\002\000\054\017\166" +
    "\020\171\021\162\022\173\026\uffd5\034\uffd5\036\uffd5\040" +
    "\uffd5\041\uffd5\042\167\043\170\044\uffd5\047\175\050\163" +
    "\051\164\052\154\053\165\054\172\055\161\057\uffd5\061" +
    "\uffd5\001\002\000\054\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\026\uffc4\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\057\uffc4\061\uffc4\001\002\000\004\034" +
    "\152\001\002\000\016\011\uffb7\033\143\035\131\037\140" +
    "\041\uffb7\062\126\001\002\000\020\011\uffac\012\uffac\033" +
    "\uffac\035\uffac\037\uffac\041\uffac\062\uffac\001\002\000\016" +
    "\023\uffcf\056\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\001" +
    "\002\000\022\026\uffd7\034\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\044\uffd7\057\uffd7\061\uffd7\001\002\000\016\023\uffd4\056" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\001\002\000\016" +
    "\023\uffd3\056\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\001" +
    "\002\000\016\023\146\056\145\062\144\063\053\064\055" +
    "\065\056\001\002\000\016\023\uffc9\056\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\001\002\000\016\023\uffc6\056\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\016\023" +
    "\uffca\056\uffca\062\uffca\063\uffca\064\uffca\065\uffca\001\002" +
    "\000\016\023\uffd1\056\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\001\002\000\016\023\uffce\056\uffce\062\uffce\063\uffce" +
    "\064\uffce\065\uffce\001\002\000\016\023\uffc8\056\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\001\002\000\016\023\uffcd" +
    "\056\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002\000" +
    "\016\023\uffcb\056\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\001\002\000\016\023\uffc7\056\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\001\002\000\016\023\uffcc\056\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\001\002\000\016\023\uffc5\056" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\016" +
    "\023\uffd2\056\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\001" +
    "\002\000\016\023\uffd0\056\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\001\002\000\022\026\uffd6\034\uffd6\036\uffd6\040" +
    "\uffd6\041\uffd6\044\uffd6\057\uffd6\061\uffd6\001\002\000\054" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\026\uffc3\034\uffc3\036" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\057" +
    "\uffc3\061\uffc3\001\002\000\004\057\201\001\002\000\054" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\026\uffc2\034\uffc2\036" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057" +
    "\uffc2\061\uffc2\001\002\000\004\062\215\001\002\000\016" +
    "\023\146\056\145\062\144\063\053\064\055\065\056\001" +
    "\002\000\054\017\uffc1\020\uffc1\021\uffc1\022\uffc1\026\uffc1" +
    "\034\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\057\uffc1\061\uffc1\001\002\000\016\023\146\056" +
    "\145\062\144\063\053\064\055\065\056\001\002\000\004" +
    "\061\207\001\002\000\054\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\026\uffc0\034\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\057\uffc0\061\uffc0\001\002\000\004" +
    "\057\214\001\002\000\006\040\212\057\uffbc\001\002\000" +
    "\016\023\146\056\145\062\144\063\053\064\055\065\056" +
    "\001\002\000\004\057\uffbb\001\002\000\054\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\026\uffbe\034\uffbe\036\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\061\uffbe" +
    "\001\002\000\054\017\uffbf\020\uffbf\021\uffbf\022\uffbf\026" +
    "\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\057\uffbf\061\uffbf\001\002\000\020\011\uffe0" +
    "\012\uffe0\033\uffe0\035\uffe0\037\uffe0\041\uffe0\062\uffe0\001" +
    "\002\000\004\026\220\001\002\000\016\023\146\056\145" +
    "\062\144\063\053\064\055\065\056\001\002\000\004\012" +
    "\227\001\002\000\004\044\223\001\002\000\016\011\uffb7" +
    "\033\143\035\131\037\140\041\uffb7\062\126\001\002\000" +
    "\004\041\225\001\002\000\020\012\uffa9\023\146\056\145" +
    "\062\144\063\053\064\055\065\056\001\002\000\004\012" +
    "\uffa8\001\002\000\020\011\uffaa\012\uffaa\033\uffaa\035\uffaa" +
    "\037\uffaa\041\uffaa\062\uffaa\001\002\000\016\023\146\056" +
    "\145\062\144\063\053\064\055\065\056\001\002\000\004" +
    "\041\uffdb\001\002\000\020\011\uffe1\012\uffe1\033\uffe1\035" +
    "\uffe1\037\uffe1\041\uffe1\062\uffe1\001\002\000\006\005\uffff" +
    "\041\uffff\001\002\000\020\011\ufffb\012\ufffb\033\ufffb\035" +
    "\ufffb\037\ufffb\041\ufffb\062\ufffb\001\002\000\004\046\236" +
    "\001\002\000\016\023\146\056\145\062\144\063\053\064" +
    "\055\065\056\001\002\000\004\036\240\001\002\000\016" +
    "\023\146\056\145\062\144\063\053\064\055\065\056\001" +
    "\002\000\004\034\242\001\002\000\016\011\uffb7\033\143" +
    "\035\131\037\140\041\uffb7\062\126\001\002\000\020\011" +
    "\uffab\012\uffab\033\uffab\035\uffab\037\uffab\041\uffab\062\uffab" +
    "\001\002\000\010\013\025\014\027\024\022\001\002\000" +
    "\016\011\uffa7\033\uffa7\035\uffa7\037\uffa7\041\uffa7\062\uffa7" +
    "\001\002\000\016\011\uffb7\033\143\035\131\037\140\041" +
    "\uffb7\062\126\001\002\000\020\011\uffb7\012\250\033\143" +
    "\035\131\037\140\041\uffb7\062\126\001\002\000\020\011" +
    "\uffb9\012\uffb9\033\uffb9\035\uffb9\037\uffb9\041\uffb9\062\uffb9" +
    "\001\002\000\006\011\uffb4\041\uffb4\001\002\000\006\011" +
    "\uffb5\041\uffb5\001\002\000\006\011\uffb8\041\uffb8\001\002" +
    "\000\006\011\uffb6\041\uffb6\001\002\000\004\062\262\001" +
    "\002\000\004\041\uffba\001\002\000\016\023\146\056\145" +
    "\062\144\063\053\064\055\065\056\001\002\000\004\061" +
    "\261\001\002\000\004\046\uffd9\001\002\000\004\046\uffd8" +
    "\001\002\000\006\041\uffe7\056\107\001\002\000\004\041" +
    "\265\001\002\000\016\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\024\ufffd\001\002\000\004\041\267\001\002\000" +
    "\016\011\uffea\013\uffea\014\uffea\015\uffea\016\uffea\024\uffea" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\004\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\011\054\010\001\001\000\016\006\014\011\023\012" +
    "\025\013\017\014\022\042\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\047\001\001\000\002" +
    "\001\001\000\006\017\030\020\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\033" +
    "\001\001\000\002\001\001\000\004\020\035\001\001\000" +
    "\002\001\001\000\006\021\037\045\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\037" +
    "\045\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\067\001\001\000\006\017\102" +
    "\020\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\072\001\001\000\002\001\001\000\004\016\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\037\045\077\001\001\000\002\001\001\000\004\043\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\035\001\001\000\002\001\001\000\004\022\107\001\001" +
    "\000\006\020\116\023\115\001\001\000\002\001\001\000" +
    "\006\021\037\045\111\001\001\000\002\001\001\000\006" +
    "\005\113\054\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\037" +
    "\045\120\001\001\000\002\001\001\000\006\020\116\023" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\131\010\132\024\133\025\140\026\135\027\134\040" +
    "\126\050\141\051\127\052\136\001\001\000\004\036\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\233\024\133\025\140\026\135\027\134" +
    "\040\126\050\141\051\127\052\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\147\030\216\032\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\147" +
    "\030\150\032\146\001\001\000\004\036\203\001\001\000" +
    "\010\016\147\030\177\032\146\001\001\000\006\016\147" +
    "\032\176\001\001\000\014\003\154\031\157\033\155\034" +
    "\156\035\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\152\024\133\025\140\026\135\027\134\040" +
    "\126\050\141\051\127\052\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\147\030\175\032\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\147\030\210" +
    "\032\146\037\207\001\001\000\002\001\001\000\010\016" +
    "\147\030\205\032\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\147\030\210\032\146\037\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\147\030\221\032\146\053\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\223\024\133\025\140\026\135\027\134\040\126\050\141" +
    "\051\127\052\136\001\001\000\002\001\001\000\012\016" +
    "\147\030\221\032\146\053\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\147\030\230\032\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\147\030" +
    "\236\032\146\001\001\000\002\001\001\000\010\016\147" +
    "\030\240\032\146\001\001\000\002\001\001\000\024\010" +
    "\242\024\133\025\140\026\135\027\134\040\126\050\141" +
    "\051\127\052\136\001\001\000\002\001\001\000\012\011" +
    "\253\012\250\041\252\042\251\001\001\000\004\002\245" +
    "\001\001\000\026\007\246\010\132\024\133\025\140\026" +
    "\135\027\134\040\126\050\141\051\127\052\136\001\001" +
    "\000\024\010\233\024\133\025\140\026\135\027\134\040" +
    "\126\050\141\051\127\052\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\147\030\257\032\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\263\001\001" +
    "\000\002\001\001\000\006\005\265\054\010\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol cur_token){
System.err.println("An error has been detected on \" "+cur_token.value+" \" whose position is: line -> "+cur_token.left+", column -> "+cur_token.right);
this.report_expected_token_ids();
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


private Integer cont = 0;
private ArrayList<String> cabeceras = new ArrayList<>();
private String listaCabeceras(){
	String s = "<ul>\n<a name=\"inicio\">";
	for(int i = 0;i<this.cabeceras.size();i++){
		s+="<li>\n<a href=\"#"+this.cabeceras.get(i).split(" ")[1]+"\">"+this.cabeceras.get(i)+"</a>\n</li>\n";
	};
	s+="<li><a href=\"#progPpal\">Programa principal</a>\n</li>\n</ul>\n<hr>";
	return s;
}
private void writeHtml(String codigo){
	FileOutputStream nuevoArchivo;
	PrintStream ps;
	try{
		//nuevoArchivo = new FileOutputStream(argv[i]+".html");
		nuevoArchivo = new FileOutputStream("Prueba.html");
		ps = new PrintStream(nuevoArchivo);
		String s = "<html>\n"
                + "<head>\n"
                    +"<tittle>"+"prueba"+"</tittle>\n"
                    + "<style>\n"
                        + ".cte {color:rgb(19,189,72);}\n"
                        + ".indent {color:rgb(55,40,244);}\n"
                        + ".palres {color:rgb(0,0,0);font-weight:bold;}\n"
                    + "</style>\n<style type=\"text//css\"></style>"
                + "</head>\n"
                + "<body>\n"
                    +codigo+"\n"
                + "</body>\n"
            + "</html>";
		ps.println(s);
		ps.close();
	}catch (FileNotFoundException e){
		System.out.println("El archivo no se ha podido encontrar");
	}
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program id puntocoma BLQ punto 
            {
              Nt RESULT =null;
		int valoridleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valoridright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valorid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorBLQ = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String s = listaCabeceras(); s+="<a name=\"Inicio\"><h1>Programa: "+prueba"+"</h1></a><br><h2>Funciones y procedimientos</h2>"+valorBLQ.value; writeHtml(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt start_val = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLQ ::= DCLLIST begin AUX SENTLIST end 
            {
              Nt RESULT =null;
		int valorDCLLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorDCLLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorDCLLIST = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorSENTLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSENTLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorSENTLIST = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String s; RESULT = new Nt(valorDCLLIST.value+"<br><span class=\"palres\">begin</span>"+valorSENTLIST.value+"<span class=\"palres\">end</span>"); this.cont--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DCLLIST ::= DCLLIST DCL 
            {
              Nt RESULT =null;
		int valorDCLLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorDCLLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorDCLL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorDCLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorDCLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorDCL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorDCLL.value+valorDCL.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              Nt RESULT =null;
		 RESULT = new Nt(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTLIST ::= SENT 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENTLIST SENT 
            {
              Nt RESULT =null;
		int valorSENTLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSENTLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorSENTL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorSENT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorSENTL.value+valorSENT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCL ::= DEFCTE 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFVAR 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFPROC 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFFUN 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFTYPE 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCTE ::= tconst CTELIST 
            {
              Nt RESULT =null;
		int valorCTEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorCTEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorCTE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<span class=\"palres\">const </span>"+valorCTE.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTELIST ::= id igual SIMPVALUE puntocoma 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorSIMPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSIMPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorSIMP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<a name=\""+valor+"\">"+valor+"</a>"+valorigual+valorSIMP.value+";<br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= CTELIST id igual SIMPVALUE puntocoma 
            {
              Nt RESULT =null;
		int valorCTEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorCTEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorCTE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorSIMPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSIMPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorSIMP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt(valorCTE.value+valor+valorigual+valorSIMP.value+";<br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIMPVALUE ::= constnumint 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<span class=\"cte\">"+valor+"</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIMPVALUE ::= constnumreal 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<span class=\"cte\">"+valor+"</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= constlit 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<span class=\"cte\">"+valor+"</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFVAR ::= var DEFVARLIST puntocoma 
            {
              Nt RESULT =null;
		int valorDEFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorDEFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorDEF = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<span class=\"palres\">var </span>"+valorDEF.value+";<br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVARLIST ::= VARLIST dospuntos ALLTYPES 
            {
              Nt RESULT =null;
		int valorVARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorVARright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorVAR = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorpuntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorpuntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valorpunto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorALLTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorALLTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorALLT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorVAR.value+valorpunto+valorALLT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= DEFVARLIST puntocoma VARLIST dospuntos ALLTYPES 
            {
              Nt RESULT =null;
		int valorDEFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorDEFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorDEF = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorVARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorVARright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorVAR = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorpuntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorpuntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valorpunto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorALLTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorALLTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorALLT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorDEF.value+";<br>"+valorVAR.value+valorpunto+valorALLT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARLIST ::= id 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<a name=\""+valor+"\">"+valor+"</a>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARLIST ::= id coma VARLIST 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorVARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorVARright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorVAR = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a name=\""+valor+"\">"+valor+"</a> ,"+valorVAR.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFPROC ::= procedure id FORMAL_PARAMLIST puntocoma BLQ puntocoma 
            {
              Nt RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorFORMALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorFORMALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nt valorFORMAL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorBLQ = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 this.cabeceras.add(valor1+" "+valor+" "+valorFORMAL.value); RESULT = new Nt("<span class=\"palres\">procedure </span>"+"<a name=\"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+" "+valorFORMAL.value+";<br>"+valorBLQ.value+";<br><a href=\"#"+valor+"\">Inicio de rutina</a><br><a href=\"#Inicio\">Inicio de programa</a><hr>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFFUN ::= function id FORMAL_PARAMLIST dospuntos ALLTYPES puntocoma BLQ puntocoma 
            {
              Nt RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorFORMALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valorFORMALright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nt valorFORMAL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorpuntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorpuntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valorpunto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorALLTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorALLTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nt valorALLT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorBLQ = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 this.cabeceras.add(valor1+" "+valor+" "+valorFORMAL.value+" "+valorpunto+" "+valorALLT.value); RESULT = new Nt("<span class=\"palres\">function </span>"+"<a name=\"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+" "+valorFORMAL.value+" "+valorpunto+valorALLT.value+"; "+valorBLQ.value+";<br><a href=\"#"+valor+"\">Inicio de rutina</a><br><a href=\"#Inicio\">Inicio de programa</a><hr>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAMLIST ::= parentesisizq FORMAL_PARAM parentesisder 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("("+valor.value+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= 
            {
              Nt RESULT =null;
		 RESULT = new Nt(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAM ::= VARLIST dospuntos ALLTYPES 
            {
              Nt RESULT =null;
		int valorVARLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorVARLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorVARL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorALLTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorALLTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorALLT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorVARL.value+valor+valorALLT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST dospuntos ALLTYPES puntocoma FORMAL_PARAM 
            {
              Nt RESULT =null;
		int valorVARLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorVARLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorVARL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorALLTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorALLTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorALLT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorFORMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorFORMright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorFORM = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorVARL.value+valor+valorALLT.value+";<br>"+valorFORM.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TBAS ::= tint 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<span class=\"palres\">"+valor+"</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TBAS ::= real 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<span class=\"palres\">"+valor+"</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TBAS ::= tchar 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<span class=\"palres\">"+valor+"</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= ASIG puntocoma 
            {
              Nt RESULT =null;
		int valorASIGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorASIGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorASIG = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<div style=\"text-indent: "+0.5*this.cont+"cm\">"+valorASIG.value+";</div><br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= PROC_CALL puntocoma 
            {
              Nt RESULT =null;
		int valorPROCCALLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorPROCCALLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorPROCCALL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<div style=\"text-indent: "+0.5*this.cont+"cm\">"+valorPROCCALL.value+";</div><br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= EXEBLQ 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<div style=\"text-indent: "+0.5*this.cont+"cm\">"+valor.value+"</div>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= WLOOP 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<div style=\"text-indent: "+0.5*this.cont+"cm\">"+valor.value+"</div>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= FLOOP 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<div style=\"text-indent: "+0.5*this.cont+"cm\">"+valor.value+"</div>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= CASE 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<div style=\"text-indent: "+0.5*this.cont+"cm\">"+valor.value+"</div>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIG ::= ID asignacion EXP 
            {
              Nt RESULT =null;
		int valorIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorID = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorID.value+asig+valorEXP.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= id 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt("<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID ::= id corcheteizq EXP corcheteder 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+"["+valorEXP+"]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID ::= id punto id 
            {
              Nt RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a href=\"#"+valor1+"\"><span class=\"ident\">"+valor1+"</span></a>"+"."+"<a href=\"#"+valor2+"\"><span class=\"ident\">"+valor2+"</span></a>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= FACTOR EXPAUX 
            {
              Nt RESULT =null;
		int valorFACTORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorFACTORright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorFACTOR = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorEXPAUXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPAUXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorEXPAUX = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt(valorFACTOR.value+valorEXPAUX.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPAUX ::= OP EXP 
            {
              Nt RESULT =null;
		int valorOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorOP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt(valorOP.value+valorEXP.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPAUX",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPAUX ::= 
            {
              Nt RESULT =null;
		 RESULT = new Nt(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPAUX",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= OPCOMP 
            {
              Nt RESULT =null;
		int valorOPCOMPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorOPCOMPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorOPCOMP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt(valorOPCOMP.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= OPLOG 
            {
              Nt RESULT =null;
		int valorOPLOGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorOPLOGright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorOPLOG = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Nt(valorOPLOG.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= OPARIT 
            {
              Nt RESULT =null;
		int valorOPARITleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorOPARITright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorOPARIT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Nt(valorOPARIT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPCOMP ::= menor 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPCOMP ::= mayor 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPCOMP ::= menorigual 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPCOMP ::= mayorigual 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPCOMP ::= igual 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPCOMP ::= distinto 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPARIT ::= mas 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPARIT ::= menos 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPARIT ::= por 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPARIT ::= div 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPARIT ::= mod 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= or 
            {
              Nt RESULT =null;
		 RESULT = new Nt("<span class=\"palres\">or</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLOG ::= and 
            {
              Nt RESULT =null;
		 RESULT = new Nt("<span class=\"palres\">and</span>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR ::= SIMPVALUE 
            {
              Nt RESULT =null;
		int valorSIMPVALUEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSIMPVALUEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorSIMPVALUE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Nt(valorSIMPVALUE.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR ::= not FACTOR 
            {
              Nt RESULT =null;
		int valorFACTORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorFACTORright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorFACTOR = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Nt("<span class=\"palres\">not</span>"+valorFACTOR.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTOR ::= parentesisizq EXP parentesisder 
            {
              Nt RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("("+valorEXP.value+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FACTOR ::= id SUBPPARAMLIST 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSUBPPARAMLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSUBPPARAMLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorSUBPPARAMLIST = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+valorSUBPPARAMLIST.value);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FACTOR ::= id corcheteizq EXP corcheteder 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Nt("<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+"["+valorEXP.value+"]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FACTOR ::= id punto id 
            {
              Nt RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a href=\"#"+valor1+"\"><span class=\"ident\">"+valor1+"</span></a>"+"."+"<a href=\"#"+valor2+"\"><span class=\"ident\">"+valor2+"</span></a>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SUBPPARAMLIST ::= parentesisizq EXPLIST parentesisder 
            {
              Nt RESULT =null;
		int valorEXPLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorEXPLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorEXPLIST = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Nt("("+valorEXPLIST.value+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SUBPPARAMLIST ::= 
            {
              Nt RESULT =null;
		 RESULT = new Nt(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPLIST ::= EXP 
            {
              Nt RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt(valorEXP.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPLIST ::= EXP coma EXPLIST 
            {
              Nt RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorEXPLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorEXPLIST = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Nt(valorEXP.value+","+valorEXPLIST.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PROC_CALL ::= id SUBPPARAMLIST 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSUBPARAMLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSUBPARAMLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorSUBPARAMLIST = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+valorSUBPARAMLIST.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXEBLQ ::= DCLLIST_BLQ begin AUX SENTLIST end 
            {
              Nt RESULT =null;
		int valorDCLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorDCLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorDCL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorSENT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt(valorDCL.value+"<br><span class=\"palres\">begin</span>"+valorSENT.value+"<span class=\"palres\">end</span>"); this.cont--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DCLLIST_BLQ ::= DCLLIST_BLQ puntocoma DCL_BLQ 
            {
              Nt RESULT =null;
		int valorDCLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorDCLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorDCL = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorDCLBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorDCLBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorDCLBLQ = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorDCL.value+";<br>"+valorDCLBLQ.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DCLLIST_BLQ ::= 
            {
              Nt RESULT =null;
		RESULT = new Nt(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DCL_BLQ ::= DEFCTE 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DCL_BLQ ::= DEFTYPE 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DCL_BLQ ::= DEFVAR 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valor = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valor.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DEFTYPE ::= type TYPELIST 
            {
              Nt RESULT =null;
		int valorTYPEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorTYPEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorTYPE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<span class=\"palres\">type</span>"+valorTYPE.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPELIST ::= id igual UDTYPE puntocoma 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorUDTYPEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorUDTYPEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorUDTYPE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<a name=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+valorigual+valorUDTYPE.value+";<br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPELIST ::= id igual UDTYPE puntocoma TYPELIST 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorUDTYPEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorUDTYPEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorUDTYPE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorTYPEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorTYPEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorTYPE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a name=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+valorigual+valorUDTYPE.value+";<br>"+valorTYPE.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UDTYPE ::= array corcheteizq SIMPVALUE puntopunto SIMPVALUE corcheteder of ALLTYPES 
            {
              Nt RESULT =null;
		int valorSIMP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valorSIMP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nt valorSIMP1 = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorpuntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorpuntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valorpunto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorSIMP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorSIMP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nt valorSIMP2 = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorALLTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorALLTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorALLT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<span class=\"palres\">array</span>"+"["+valorSIMP1.value+valorpunto+valorSIMP2.value+"]"+"<span class=\"palres\">of</span>"+valorALLT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // UDTYPE ::= record DEFVARLIST end 
            {
              Nt RESULT =null;
		int valorDEFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorDEFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorDEF = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<span class=\"palres\">record</span>"+valorDEF.value+"<span class=\"palres\">end</span>"); this.cont--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ALLTYPES ::= TBAS 
            {
              Nt RESULT =null;
		int valorTBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorTBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorTB = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorTB.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ALLTYPES ::= id 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WLOOP ::= twhile EXP tdo SENT 
            {
              Nt RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorSENT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<span class=\"palres\">while</span>"+valorEXP.value+"<span class=\"palres\">do</span>"+valorSENT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FLOOP ::= tfor id asignacion EXP to EXP tdo SENT 
            {
              Nt RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorasigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valorasigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String valorasig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorEXP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorEXP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorEXP1 = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorEXP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorEXP2 = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorSENT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt("<span class=\"palres\">for</span>"+"<a href=\"#"+valor+"\"><span class=\"ident\">"+valor+"</span></a>"+valorasig+valorEXP1.value+"<span class=\"palres\">to</span>"+valorEXP2.value+"do"+valorSENT.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASE ::= tcase EXP of CASELIST end 
            {
              Nt RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorCASEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorCASEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorCASE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt("<span class=\"palres\">case</span>"+valorEXP.value+"<span class=\"palres\">of</span>"+valorCASE.value+"<span class=\"palres\">end</span>"); this.cont--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASELIST ::= EXP dospuntos SENT puntocoma 
            {
              Nt RESULT =null;
		int valueEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nt valueEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nt valorSENT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Nt(valueEXP.value+valor+valorSENT.value+";<br>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASELIST ::= EXP dospuntos SENT puntocoma CASELIST 
            {
              Nt RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nt valorEXP = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nt valorSENT = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorCASEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorCASEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nt valorCASE = (Nt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nt(valorEXP.value+valor+valorSENT.value+";<br>"+valorCASE.value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AUX ::= 
            {
              Nt RESULT =null;
		 this.cont++; RESULT = new Nt(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUX",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
