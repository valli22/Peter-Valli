/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/UNI/Git hub valli/Peter-Valli/PL/LexicoPracticas.flex</tt>
 */
class PracticaLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int constLit = 2;
  public static final int comentPar = 4;
  public static final int comentLlav = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\40\0\1\64\3\0\1\5\2\0\1\11\1\13\1\10\1\7\1\56"+
    "\1\53\1\3\1\4\1\0\12\2\1\57\1\54\1\60\1\55\1\61"+
    "\2\0\1\31\1\6\1\42\1\6\1\30\1\6\1\36\1\43\1\33"+
    "\2\1\1\32\1\1\1\34\1\1\1\66\1\1\1\27\1\1\1\35"+
    "\6\1\1\62\1\0\1\63\1\0\1\1\1\0\1\25\1\14\1\37"+
    "\1\21\1\15\1\46\1\16\1\50\1\17\2\1\1\51\1\26\1\20"+
    "\1\24\1\22\1\1\1\23\1\40\1\41\1\45\1\44\1\52\1\1"+
    "\1\47\1\1\1\12\1\0\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\22\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\25"+
    "\1\26\1\27\1\30\1\0\1\31\1\30\1\0\1\32"+
    "\3\27\1\33\2\27\1\34\2\27\1\35\1\36\7\27"+
    "\1\37\7\27\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\27\1\46\1\27\1\47\1\50\2\27\1\51"+
    "\1\27\1\52\7\27\1\53\1\54\2\27\1\45\1\27"+
    "\1\55\4\27\1\56\2\27\1\57\1\60\1\61\3\27"+
    "\1\62\3\27\1\63\1\27\1\64\2\27\1\65\2\27"+
    "\1\66\3\27\1\67\1\27\1\70\4\27\1\71\1\72"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\334\0\334\0\334\0\334\0\u0226\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\334\0\334\0\334\0\u0181\0\u063b\0\u0672\0\u06a9"+
    "\0\334\0\334\0\334\0\334\0\u06e0\0\334\0\u0717\0\334"+
    "\0\u0113\0\u014a\0\u074e\0\334\0\u0785\0\u07bc\0\334\0\u07f3"+
    "\0\u082a\0\u0861\0\u0113\0\u0898\0\u08cf\0\u0113\0\u0906\0\u093d"+
    "\0\u0113\0\u0113\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0113\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\334\0\334\0\334\0\334\0\334\0\u074e\0\u0c76"+
    "\0\u0cad\0\u0113\0\u0ce4\0\u0113\0\u0113\0\u0d1b\0\u0d52\0\u0113"+
    "\0\u0d89\0\u0113\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0113\0\u0113\0\u0f41\0\u0f78\0\u0c76\0\u0faf\0\u0113"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u0113\0\u10c2\0\u10f9\0\u0113"+
    "\0\u0113\0\u0113\0\u1130\0\u1167\0\u119e\0\u0113\0\u11d5\0\u120c"+
    "\0\u1243\0\u0113\0\u127a\0\u0113\0\u12b1\0\u12e8\0\u0113\0\u131f"+
    "\0\u1356\0\u0113\0\u138d\0\u13c4\0\u13fb\0\u0113\0\u1432\0\u0113"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u0113\0\u0113\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\6\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\6\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\6\1\33\3\6\1\34\1\6\1\35\1\36\1\6"+
    "\1\37\1\6\1\40\3\6\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\5"+
    "\1\6\11\54\1\55\55\54\7\56\1\57\5\56\1\0"+
    "\1\56\2\0\2\56\1\0\1\56\1\0\12\56\2\0"+
    "\4\56\1\0\17\56\1\0\65\56\1\60\1\56\70\0"+
    "\2\61\3\0\1\61\5\0\37\61\13\0\1\61\2\0"+
    "\1\62\1\0\1\63\64\0\1\62\70\0\1\64\64\0"+
    "\1\65\1\66\2\0\1\65\21\0\2\65\10\0\1\65"+
    "\13\0\1\66\17\0\1\67\60\0\2\61\3\0\1\61"+
    "\5\0\1\61\1\70\35\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\4\61\1\71\30\61\1\72\1\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\32\61"+
    "\1\73\4\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\10\61\1\74\26\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\3\61\1\75\4\61\1\76\26\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\7\61"+
    "\1\77\27\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\1\61\1\100\35\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\7\61\1\101\22\61\1\102\4\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\4\61"+
    "\1\103\2\61\1\104\27\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\10\61\1\105\26\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\14\61\1\106\22\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\20\61"+
    "\1\107\16\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\10\61\1\110\1\111\25\61\13\0\1\61\1\0"+
    "\2\61\3\0\1\61\5\0\10\61\1\112\22\61\1\113"+
    "\1\114\2\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\27\61\1\115\7\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\11\61\1\116\25\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\10\61\1\117\20\61"+
    "\1\120\5\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\34\61\1\121\2\61\13\0\1\61\55\0\1\122"+
    "\66\0\1\123\3\0\1\124\62\0\1\125\22\0\1\126"+
    "\65\0\1\60\60\0\1\127\66\0\1\65\1\0\1\130"+
    "\1\0\1\65\21\0\2\65\10\0\1\65\26\0\1\65"+
    "\3\0\1\65\21\0\2\65\10\0\1\65\25\0\2\61"+
    "\3\0\1\61\5\0\2\61\1\131\34\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\5\61\1\132\31\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\24\61"+
    "\1\133\12\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\25\61\1\134\11\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\30\61\1\135\6\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\10\61\1\136\26\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\23\61"+
    "\1\137\13\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\5\61\1\140\31\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\7\61\1\141\27\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\5\61\1\142\31\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\15\61"+
    "\1\143\21\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\21\61\1\144\15\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\4\61\1\145\32\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\24\61\1\146\12\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\6\61"+
    "\1\147\30\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\1\61\1\150\35\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\15\61\1\151\21\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\7\61\1\152\27\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\7\61"+
    "\1\153\27\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\4\61\1\154\32\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\3\61\1\155\33\61\13\0\1\61"+
    "\2\0\1\156\3\0\1\156\21\0\2\156\10\0\1\156"+
    "\25\0\2\61\3\0\1\61\5\0\3\61\1\157\33\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\1\61"+
    "\1\160\35\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\2\61\1\161\20\61\1\162\13\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\10\61\1\163\26\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\11\61"+
    "\1\164\25\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\16\61\1\165\20\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\14\61\1\166\22\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\24\61\1\167\12\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\1\61"+
    "\1\170\35\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\1\61\1\171\35\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\4\61\1\172\32\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\13\61\1\173\23\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\23\61"+
    "\1\174\13\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\35\61\1\175\1\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\4\61\1\176\32\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\7\61\1\177\27\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\1\61"+
    "\1\200\35\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\7\61\1\201\27\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\33\61\1\202\3\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\22\61\1\203\14\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\25\61"+
    "\1\204\11\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\15\61\1\205\21\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\25\61\1\206\11\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\1\61\1\207\35\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\11\61"+
    "\1\210\25\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\5\61\1\211\31\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\5\61\1\212\31\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\14\61\1\213\22\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\26\61"+
    "\1\214\10\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\3\61\1\215\33\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\12\61\1\216\24\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\31\61\1\217\5\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\13\61"+
    "\1\220\23\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\21\61\1\221\15\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\10\61\1\222\26\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\7\61\1\223\27\61"+
    "\13\0\1\61\1\0\2\61\3\0\1\61\5\0\14\61"+
    "\1\224\22\61\13\0\1\61\1\0\2\61\3\0\1\61"+
    "\5\0\4\61\1\225\32\61\13\0\1\61\1\0\2\61"+
    "\3\0\1\61\5\0\1\61\1\226\35\61\13\0\1\61"+
    "\1\0\2\61\3\0\1\61\5\0\13\61\1\227\23\61"+
    "\13\0\1\61";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5445];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\5\1\4\11\23\1\3\11\4\1\4\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\1\11\1\1"+
    "\1\0\1\11\32\1\5\11\1\1\1\0\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PracticaLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("intro");
            }
          case 60: break;
          case 2: 
            { return new java_cup.runtime.Symbol(sym.menos);
            }
          case 61: break;
          case 3: 
            { return new java_cup.runtime.Symbol(sym.punto);
            }
          case 62: break;
          case 4: 
            { return new java_cup.runtime.Symbol(sym.por);
            }
          case 63: break;
          case 5: 
            { return new java_cup.runtime.Symbol(sym.parentesisder);
            }
          case 64: break;
          case 6: 
            { yybegin(constLit);
            }
          case 65: break;
          case 7: 
            { yybegin(comentLlav);
            }
          case 66: break;
          case 8: 
            { return new java_cup.runtime.Symbol(sym.parentesisizq);
            }
          case 67: break;
          case 9: 
            { return new java_cup.runtime.Symbol(sym.coma);
            }
          case 68: break;
          case 10: 
            { return new java_cup.runtime.Symbol(sym.puntocoma);
            }
          case 69: break;
          case 11: 
            { return new java_cup.runtime.Symbol(sym.igual);
            }
          case 70: break;
          case 12: 
            { return new java_cup.runtime.Symbol(sym.mas);
            }
          case 71: break;
          case 13: 
            { return new java_cup.runtime.Symbol(sym.dospuntos);
            }
          case 72: break;
          case 14: 
            { return new java_cup.runtime.Symbol(sym.mayor);
            }
          case 73: break;
          case 15: 
            { return new java_cup.runtime.Symbol(sym.menor);
            }
          case 74: break;
          case 16: 
            { return new java_cup.runtime.Symbol(sym.corcheteizq);
            }
          case 75: break;
          case 17: 
            { return new java_cup.runtime.Symbol(sym.corcheteder);
            }
          case 76: break;
          case 18: 
            { System.out.println("esp");
            }
          case 77: break;
          case 19: 
            { 
            }
          case 78: break;
          case 20: 
            { yybegin(YYINITIAL); return new java_cup.runtime.Symbol(sym.constlit);
            }
          case 79: break;
          case 21: 
            { System.out.print(yytext());
            }
          case 80: break;
          case 22: 
            { yybegin(YYINITIAL);
            }
          case 81: break;
          case 23: 
            { return new java_cup.runtime.Symbol(sym.id);
            }
          case 82: break;
          case 24: 
            { return new java_cup.runtime.Symbol(sym.constnumint);
            }
          case 83: break;
          case 25: 
            { return new java_cup.runtime.Symbol(sym.puntopunto);
            }
          case 84: break;
          case 26: 
            { yybegin(comentPar);
            }
          case 85: break;
          case 27: 
            { return new java_cup.runtime.Symbol(sym.tif);
            }
          case 86: break;
          case 28: 
            { return new java_cup.runtime.Symbol(sym.tdo);
            }
          case 87: break;
          case 29: 
            { return new java_cup.runtime.Symbol(sym.or);
            }
          case 88: break;
          case 30: 
            { return new java_cup.runtime.Symbol(sym.of);
            }
          case 89: break;
          case 31: 
            { return new java_cup.runtime.Symbol(sym.to);
            }
          case 90: break;
          case 32: 
            { return new java_cup.runtime.Symbol(sym.asignacion);
            }
          case 91: break;
          case 33: 
            { return new java_cup.runtime.Symbol(sym.menorigual);
            }
          case 92: break;
          case 34: 
            { return new java_cup.runtime.Symbol(sym.distinto);
            }
          case 93: break;
          case 35: 
            { return new java_cup.runtime.Symbol(sym.mayorigual);
            }
          case 94: break;
          case 36: 
            { System.out.print("'");
            }
          case 95: break;
          case 37: 
            { return new java_cup.runtime.Symbol(sym.constnumreal);
            }
          case 96: break;
          case 38: 
            { return new java_cup.runtime.Symbol(sym.end);
            }
          case 97: break;
          case 39: 
            { return new java_cup.runtime.Symbol(sym.not);
            }
          case 98: break;
          case 40: 
            { return new java_cup.runtime.Symbol(sym.div);
            }
          case 99: break;
          case 41: 
            { return new java_cup.runtime.Symbol(sym.and);
            }
          case 100: break;
          case 42: 
            { return new java_cup.runtime.Symbol(sym.mod);
            }
          case 101: break;
          case 43: 
            { return new java_cup.runtime.Symbol(sym.var);
            }
          case 102: break;
          case 44: 
            { return new java_cup.runtime.Symbol(sym.tfor);
            }
          case 103: break;
          case 45: 
            { return new java_cup.runtime.Symbol(sym.telse);
            }
          case 104: break;
          case 46: 
            { return new java_cup.runtime.Symbol(sym.real);
            }
          case 105: break;
          case 47: 
            { return new java_cup.runtime.Symbol(sym.tcase);
            }
          case 106: break;
          case 48: 
            { return new java_cup.runtime.Symbol(sym.type);
            }
          case 107: break;
          case 49: 
            { return new java_cup.runtime.Symbol(sym.then);
            }
          case 108: break;
          case 50: 
            { return new java_cup.runtime.Symbol(sym.begin);
            }
          case 109: break;
          case 51: 
            { return new java_cup.runtime.Symbol(sym.array);
            }
          case 110: break;
          case 52: 
            { return new java_cup.runtime.Symbol(sym.tconst);
            }
          case 111: break;
          case 53: 
            { return new java_cup.runtime.Symbol(sym.twhile);
            }
          case 112: break;
          case 54: 
            { return new java_cup.runtime.Symbol(sym.record);
            }
          case 113: break;
          case 55: 
            { return new java_cup.runtime.Symbol(sym.program);
            }
          case 114: break;
          case 56: 
            { return new java_cup.runtime.Symbol(sym.tint);
            }
          case 115: break;
          case 57: 
            { return new java_cup.runtime.Symbol(sym.function);
            }
          case 116: break;
          case 58: 
            { return new java_cup.runtime.Symbol(sym.procedure);
            }
          case 117: break;
          case 59: 
            { return new java_cup.runtime.Symbol(sym.tchar);
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
